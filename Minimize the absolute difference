  
 Question:
 
Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively.
i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]


Algorithm Behind this:

Initially point pointer to minimum element for all these array, Took absolute difference of maximum and minimum, then we can only way to minimise this difference by going forward to minimum element array. 

  
  
  
  public int solve(ArrayList<Integer> A, ArrayList<Integer> B, ArrayList<Integer> C) {
        int i=0,j=0,k=0,cur_diff,min_diff=Integer.MAX_VALUE,term;
        while(i<A.size()&&j<B.size()&&k<C.size())
        {
            cur_diff=Math.abs(Math.max(A.get(i),Math.max(B.get(j),C.get(k)))-(Math.min(A.get(i),Math.min(B.get(j),C.get(k)))));
         if(cur_diff<min_diff)
           min_diff=cur_diff;
          term=(Math.min(A.get(i),Math.min(B.get(j),C.get(k))));
          if(term==A.get(i))
            i++;
          else if(term==B.get(j))
           j++;
          else
           k++;
        }
        return min_diff;
        
    }
